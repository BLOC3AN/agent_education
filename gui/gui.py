import streamlit as st
import requests 
from typing import Any, Dict
from src.utils.logger import Logger
logger=Logger(__name__)

import re
import base64

# --- C·∫•u h√¨nh chung ---
# C·∫•u h√¨nh page ch·ªâ ch·∫°y m·ªôt l·∫ßn
if "page_config_set" not in st.session_state:
    st.set_page_config(page_title="Agent Education", page_icon="üéì")
    st.session_state.page_config_set = True

# ƒê·ªãnh nghƒ©a URL c·ªßa Agent FastAPI c·ªßa b·∫°n
# ƒê·∫£m b·∫£o Agent FastAPI ƒëang ch·∫°y t·∫°i ƒë·ªãa ch·ªâ v√† c·ªïng n√†y
AGENT_API_URL = "http://localhost:2222/agent/request"

# --- L·ªõp GUI ---
class GUI:
    def __init__(self):
        # Kh√¥ng c·∫ßn kh·ªüi t·∫°o AgentConversation ·ªü ƒë√¢y n·ªØa v√¨ n√≥ l√† d·ªãch v·ª• FastAPI ri√™ng
        pass

    def init_gui(self):
        """Kh·ªüi t·∫°o giao di·ªán ng∆∞·ªùi d√πng ch√≠nh c·ªßa Streamlit."""
        st.title("üéì Agent Education - AI Gi√°o d·ª•c")
        st.markdown("*H·ªá th·ªëng AI h·ªó tr·ª£ gi√°o d·ª•c v√† t∆∞ v·∫•n h·ªçc t·∫≠p*")

        # Kh·ªüi t·∫°o session state cho docx_content n·∫øu ch∆∞a c√≥
        if "docx_content" not in st.session_state:
            st.session_state.docx_content = {}  # Dictionary ƒë·ªÉ l∆∞u n·ªôi dung docx cho m·ªói tin nh·∫Øn
            st.session_state.docx_filename = {}  # Dictionary ƒë·ªÉ l∆∞u t√™n file cho m·ªói tin nh·∫Øn
            st.session_state.custom_filenames = {}  # Dictionary ƒë·ªÉ l∆∞u t√™n file t√πy ch·ªânh cho m·ªói tin nh·∫Øn
        
        # Kh·ªüi t·∫°o session state cho hi·ªÉn th·ªã dialog nh·∫≠p t√™n file
        if "show_filename_dialog" not in st.session_state:
            st.session_state.show_filename_dialog = False
            st.session_state.dialog_message_index = -1

        # Sidebar ƒë·ªÉ ch·ªçn mode v√† c√°c t√πy ch·ªçn kh√°c
        with st.sidebar:
            st.header("‚öôÔ∏è C√†i ƒë·∫∑t")
            # N√∫t toggle cho ch·∫ø ƒë·ªô streaming (ch·ªâ l√† giao di·ªán, logic th·ª±c t·∫ø s·∫Ω nh·∫≠n full response)
            streaming_mode = st.toggle("üîÑ Streaming Mode", value=True, help="B·∫≠t ƒë·ªÉ hi·ªÉn th·ªã hi·ªáu ·ª©ng 'ƒëang suy nghƒ©' v√† ƒë·ª£i ph·∫£n h·ªìi ƒë·∫ßy ƒë·ªß. (L∆∞u √Ω: API hi·ªán t·∫°i kh√¥ng h·ªó tr·ª£ streaming t·ª´ng token)")

            if st.button("üóëÔ∏è X√≥a l·ªãch s·ª≠ chat"):
                st.session_state.messages = []
                st.session_state.docx_content = {}
                st.session_state.docx_filename = {}
                st.session_state.custom_filenames = {}
                st.session_state.show_filename_dialog = False
                st.session_state.dialog_message_index = -1
                st.rerun() # L√†m m·ªõi l·∫°i ·ª©ng d·ª•ng ƒë·ªÉ x√≥a l·ªãch s·ª≠

        # Kh·ªüi t·∫°o session state cho messages n·∫øu ch∆∞a c√≥
        if "messages" not in st.session_state:
            st.session_state.messages = []

        # Hi·ªÉn th·ªã l·ªãch s·ª≠ chat
        for i, message in enumerate(st.session_state.messages):
            with st.chat_message(message["role"]):
                st.markdown(message["content"])
                
                # Ch·ªâ hi·ªÉn th·ªã t√πy ch·ªçn t·∫£i xu·ªëng cho tin nh·∫Øn c·ªßa assistant
                if message["role"] == "assistant":
                    # N·∫øu tin nh·∫Øn n√†y ch∆∞a c√≥ docx content, t·∫°o ngay
                    if i not in st.session_state.docx_content:
                        docx_content, docx_filename = self._convert_md_to_docx(message["content"])
                        if docx_content:
                            st.session_state.docx_content[i] = docx_content
                            st.session_state.docx_filename[i] = docx_filename
                    
                    # N·∫øu tin nh·∫Øn n√†y c√≥ docx content, hi·ªÉn th·ªã n√∫t t·∫£i xu·ªëng
                    if i in st.session_state.docx_content:
                        with st.expander("üì• T·∫£i xu·ªëng t√†i li·ªáu"):
                            # L·∫•y t√™n file t√πy ch·ªânh t·ª´ session state ho·∫∑c s·ª≠ d·ª•ng t√™n m·∫∑c ƒë·ªãnh
                            default_filename = st.session_state.custom_filenames.get(i, st.session_state.docx_filename.get(i, "tai_lieu.docx"))
                            
                            # Text input cho ph√©p ng∆∞·ªùi d√πng nh·∫≠p t√™n file
                            custom_filename = st.text_input(
                                "T√™n file:",
                                value=default_filename,
                                key=f"filename_input_{i}"
                            )
                            
                            # ƒê·∫£m b·∫£o filename c√≥ ƒëu√¥i .docx
                            if not custom_filename.lower().endswith('.docx'):
                                custom_filename += '.docx'
                            
                            # L∆∞u t√™n file t√πy ch·ªânh v√†o session state
                            st.session_state.custom_filenames[i] = custom_filename
                            
                            # N√∫t t·∫£i xu·ªëng
                            st.download_button(
                                label="üì• T·∫£i t√†i li·ªáu",
                                data=base64.b64decode(st.session_state.docx_content[i]),
                                file_name=custom_filename,
                                mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                                key=f"download_docx_{i}",
                                use_container_width=True,
                            )

        # √î nh·∫≠p li·ªáu cho ng∆∞·ªùi d√πng
        if prompt := st.chat_input("H√£y h·ªèi g√¨ ƒë√≥ v·ªÅ gi√°o d·ª•c, h·ªçc t·∫≠p ho·∫∑c s·ª©c kh·ªèe..."):
            # Th√™m tin nh·∫Øn ng∆∞·ªùi d√πng v√†o l·ªãch s·ª≠ chat
            st.session_state.messages.append({"role": "user", "content": prompt})
            with st.chat_message("user"):
                st.markdown(prompt)

            # X·ª≠ l√Ω ph·∫£n h·ªìi t·ª´ AI Agent (g·ªçi API)
            with st.chat_message("assistant"):
                if streaming_mode:
                    self._handle_response_via_api_with_spinner(prompt)
                else:
                    self._handle_response_via_api_direct(prompt)

    def _call_agent_api(self, user_input: str):
        """
        G·ª≠i y√™u c·∫ßu HTTP POST ƒë·∫øn Agent FastAPI v√† tr·∫£ v·ªÅ ph·∫£n h·ªìi.
        """
        try:
            payload = {"input": user_input} # D·ªØ li·ªáu c·∫ßn g·ª≠i trong body c·ªßa POST request

            # G·ª≠i POST request ƒë·∫øn Agent API
            response = requests.post(AGENT_API_URL, json=payload, timeout=60) # Th√™m timeout
            response.raise_for_status() # N√©m HTTPError cho m√£ tr·∫°ng th√°i l·ªói (4xx ho·∫∑c 5xx)

            # Ph√¢n t√≠ch ph·∫£n h·ªìi JSON t·ª´ Agent
            return response.json()

        except requests.exceptions.Timeout:
            return {"error": "API Timeout: Agent kh√¥ng ph·∫£n h·ªìi k·ªãp th·ªùi."}
        except requests.exceptions.ConnectionError:
            return {"error": "L·ªói k·∫øt n·ªëi: Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi Agent API. ƒê·∫£m b·∫£o Agent ƒëang ch·∫°y."}
        except requests.exceptions.HTTPError as e:
            return {"error": f"L·ªói HTTP t·ª´ Agent: {e.response.status_code} - {e.response.text}"}
        except requests.exceptions.RequestException as e:
            return {"error": f"L·ªói y√™u c·∫ßu: {e}"}
        except Exception as e:
            return {"error": f"L·ªói kh√¥ng x√°c ƒë·ªãnh khi g·ªçi API: {e}"}

    def _handle_response_via_api_with_spinner(self, prompt):
        """
        X·ª≠ l√Ω ph·∫£n h·ªìi b·∫±ng c√°ch g·ªçi API, hi·ªÉn th·ªã spinner v√† update ƒë·∫ßy ƒë·ªß khi c√≥ k·∫øt qu·∫£.
        (M√¥ ph·ªèng "streaming" nh∆∞ng th·ª±c t·∫ø l√† ch·ªù full response t·ª´ API).
        """
        message_placeholder = st.empty() # Placeholder ƒë·ªÉ c·∫≠p nh·∫≠t tin nh·∫Øn
        debug_placeholder = st.empty() # Placeholder cho debug/loading info

        message_placeholder.markdown("ü§î Agent ƒëang suy nghƒ©... ")
        debug_placeholder.info("ƒêang ch·ªù ph·∫£n h·ªìi t·ª´ Agent API...")

        try:
            api_result = self._call_agent_api(prompt)
            logger.info(f"Result from agent : {api_result.keys()}")

            if "error" in api_result:
                full_response = f"‚ùå L·ªói: {api_result['error']}"
                message_placeholder.error(full_response)
                debug_placeholder.empty() # X√≥a debug placeholder
            else:
                # Gi·∫£ s·ª≠ Agent FastAPI tr·∫£ v·ªÅ {"response": "..."}
                response_content = api_result.get("response", "Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi h·ª£p l·ªá t·ª´ Agent.")
                full_response:Any|Dict = response_content
                if isinstance(full_response, dict) and "output" in full_response:
                    with message_placeholder.container():
                        st.markdown(full_response['output']) # Hi·ªÉn th·ªã to√†n b·ªô ph·∫£n h·ªìi
                
                    # Th√™m ph·∫£n h·ªìi v√†o l·ªãch s·ª≠ chat
                    st.session_state.messages.append({"role": "assistant", "content": full_response['output']})
                
                    # T·∫°o docx content s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω trong init_gui
                
                else:
                    message_placeholder.warning(f"‚ö†Ô∏è Agent ph·∫£n h·ªìi kh√¥ng c√≥ ƒë·ªãnh d·∫°ng mong ƒë·ª£i: {full_response}")
                    # Th√™m ph·∫£n h·ªìi v√†o l·ªãch s·ª≠ chat
                    st.session_state.messages.append({"role": "assistant", "content": str(full_response)})
                
                debug_placeholder.empty() # X√≥a debug placeholder sau khi c√≥ k·∫øt qu·∫£

        except Exception as e:
            error_msg = f"‚ùå ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën trong Streamlit: {str(e)}"
            message_placeholder.error(error_msg)
            debug_placeholder.empty()
            st.session_state.messages.append({"role": "assistant", "content": error_msg})


    def _handle_response_via_api_direct(self, prompt):
        """
        X·ª≠ l√Ω ph·∫£n h·ªìi b·∫±ng c√°ch g·ªçi API v√† hi·ªÉn th·ªã k·∫øt qu·∫£ tr·ª±c ti·∫øp (kh√¥ng c√≥ hi·ªáu ·ª©ng streaming).
        """
        with st.spinner("ƒêang suy nghƒ©..."):
            try:    
                api_result = self._call_agent_api(prompt)
            
                if "error" in api_result:
                    response_content = f"‚ùå L·ªói: {api_result['error']}"
                    st.error(response_content)
                    # Th√™m ph·∫£n h·ªìi v√†o l·ªãch s·ª≠ chat
                    st.session_state.messages.append({"role": "assistant", "content": response_content})
                else:
                    # Gi·∫£ s·ª≠ Agent FastAPI tr·∫£ v·ªÅ {"response": "..."}
                    response_content = api_result.get("response", "Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi h·ª£p l·ªá t·ª´ Agent.")
                    
                    # T·∫°o container ƒë·ªÉ hi·ªÉn th·ªã ph·∫£n h·ªìi
                    response_container = st.container()
                    
                    with response_container:
                        if isinstance(response_content, dict) and "output" in response_content:
                            st.markdown(response_content["output"])
                            # Th√™m ph·∫£n h·ªìi v√†o l·ªãch s·ª≠ chat
                            st.session_state.messages.append({"role": "assistant", "content": response_content["output"]})
                            
                            # T·∫°o docx content s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω trong init_gui
                        
                        else:
                            st.markdown(response_content)
                            # Th√™m ph·∫£n h·ªìi v√†o l·ªãch s·ª≠ chat
                            st.session_state.messages.append({"role": "assistant", "content": response_content})
                            
                            # T·∫°o docx content s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω trong init_gui

            except Exception as e:
                error_msg = f"‚ùå ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën trong Streamlit: {str(e)}"
                st.error(error_msg)
                st.session_state.messages.append({"role": "assistant", "content": error_msg})

    def _check_for_document(self, response_content: str):
        """
        Ki·ªÉm tra xem ph·∫£n h·ªìi c√≥ ph·∫£i l√† t√†i li·ªáu c√≥ th·ªÉ t·∫£i xu·ªëng hay kh√¥ng.
        N·∫øu c√≥, t·∫°o file DOCX v√† l∆∞u v√†o session state.
        """
        # Ki·ªÉm tra c√°c pattern ph·ªï bi·∫øn c·ªßa t√†i li·ªáu gi√°o d·ª•c
        document_patterns = [
            r"ƒë·ªÅ\s+thi",
            r"ki·ªÉm\s+tra",
            r"b√†i\s+ki·ªÉm\s+tra",
            r"gi√°o\s+√°n",
            r"b√†i\s+gi·∫£ng",
            r"b√†i\s+t·∫≠p",
            r"t√†i\s+li·ªáu",
            r"k·∫ø\s+ho·∫°ch\s+gi·∫£ng\s+d·∫°y",
            r"gi√°o\s+tr√¨nh",
            r"ƒë·ªÅ\s+c∆∞∆°ng"
        ]
        
        is_document = any(re.search(pattern, response_content.lower()) for pattern in document_patterns)
        
        if is_document:
            # T·∫°o t√™n file m·∫∑c ƒë·ªãnh
            default_filename = "tai_lieu_giao_duc.docx"
            
            # T√¨m t√™n file ph√π h·ª£p t·ª´ n·ªôi dung
            filename_match = re.search(r"(de_thi|giao_an|bai_tap|tai_lieu)_[\w_]+\.docx", response_content)
            if filename_match:
                filename = filename_match.group(0)
            else:
                # X√°c ƒë·ªãnh lo·∫°i t√†i li·ªáu
                doc_type = "tai_lieu"
                if re.search(r"ƒë·ªÅ\s+thi", response_content.lower()):
                    doc_type = "de_thi"
                elif re.search(r"gi√°o\s+√°n", response_content.lower()):
                    doc_type = "giao_an"
                elif re.search(r"b√†i\s+t·∫≠p", response_content.lower()):
                    doc_type = "bai_tap"
                
                # T√¨m m√¥n h·ªçc
                subject_patterns = {
                    "to√°n": "toan",
                    "ti·∫øng vi·ªát": "tieng_viet",
                    "ti·∫øng anh": "tieng_anh",
                    "vƒÉn": "van",
                    "l·ªãch s·ª≠": "lich_su",
                    "ƒë·ªãa l√Ω": "dia_ly",
                    "khoa h·ªçc": "khoa_hoc",
                    "v·∫≠t l√Ω": "vat_ly",
                    "h√≥a h·ªçc": "hoa_hoc",
                    "sinh h·ªçc": "sinh_hoc"
                }
                
                subject = "chung"
                for subj_pattern, subj_code in subject_patterns.items():
                    if re.search(r'\b' + subj_pattern + r'\b', response_content.lower()):
                        subject = subj_code
                        break
                
                # T√¨m th√¥ng tin l·ªõp
                class_match = re.search(r"l·ªõp\s+(\d+)", response_content.lower())
                class_num = class_match.group(1) if class_match else ""
                
                # T·∫°o t√™n file
                if class_num:
                    filename = f"{doc_type}_{subject}_lop{class_num}.docx"
                else:
                    filename = f"{doc_type}_{subject}.docx"
            
            # Chuy·ªÉn ƒë·ªïi MD sang DOCX
            docx_content, docx_filename = self._convert_md_to_docx(response_content, filename)
            
            if docx_content:
                st.session_state.docx_content = docx_content
                st.session_state.docx_filename = docx_filename
                st.session_state.show_download = True
                # L∆∞u index c·ªßa tin nh·∫Øn cu·ªëi c√πng c√≥ t√†i li·ªáu
                st.session_state.last_document_message_index = len(st.session_state.messages) - 1
                
                # Debug log ƒë·ªÉ ki·ªÉm tra
                logger.info(f"Document detected! Index: {st.session_state.last_document_message_index}")
                
                return True
        
        return False

    def _convert_md_to_docx(self, message, output_filename=None):
        """
        Convert markdown content to docx file
        Args:
            message: Markdown content to convert
            output_filename: Name of output file (without extension)
        """
        try:
            # N·∫øu kh√¥ng c√≥ output_filename, t·∫°o t√™n m·∫∑c ƒë·ªãnh
            if not output_filename:
                from datetime import datetime
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                output_filename = f"tai_lieu_{timestamp}.docx"
            elif not output_filename.lower().endswith('.docx'):
                output_filename += '.docx'
                
            # T·∫°o document t·ª´ markdown
            import io
            import base64
            from docx import Document
            from docx.shared import Pt, Inches, RGBColor
            from docx.enum.text import WD_ALIGN_PARAGRAPH
            import markdown
            from bs4 import BeautifulSoup
            
            # Chuy·ªÉn markdown sang HTML v·ªõi c√°c extension
            html = markdown.markdown(message, extensions=['tables', 'fenced_code', 'nl2br'])
            
            # T·∫°o document m·ªõi
            doc = Document()
            
            # Thi·∫øt l·∫≠p style cho document
            style = doc.styles['Normal']
            style.font.name = 'Times New Roman'
            style.font.size = Pt(12)
            
            # Thi·∫øt l·∫≠p margin
            sections = doc.sections
            for section in sections:
                section.top_margin = Inches(1)
                section.bottom_margin = Inches(1)
                section.left_margin = Inches(1)
                section.right_margin = Inches(1)
            
            # Parse HTML
            soup = BeautifulSoup(html, 'html.parser')
            
            # Th√™m ti√™u ƒë·ªÅ
            h1_tags = soup.find_all('h1')
            if h1_tags:
                heading = doc.add_heading(h1_tags[0].text, 0)
                heading.alignment = WD_ALIGN_PARAGRAPH.CENTER
                heading_format = heading.runs[0].font
                heading_format.color.rgb = RGBColor(0, 0, 128)  # Navy blue
            
            # X·ª≠ l√Ω t·ª´ng ph·∫ßn t·ª≠ HTML
            for element in soup.find_all(['p', 'h2', 'h3', 'h4', 'ul', 'ol', 'table', 'pre', 'blockquote']):
                if element.name == 'h2':
                    heading = doc.add_heading(element.text, 1)
                    heading.runs[0].font.color.rgb = RGBColor(0, 102, 204)  # Blue
                elif element.name == 'h3':
                    heading = doc.add_heading(element.text, 2)
                    heading.runs[0].font.color.rgb = RGBColor(0, 128, 0)  # Green
                elif element.name == 'h4':
                    heading = doc.add_heading(element.text, 3)
                elif element.name == 'ul':
                    for li in element.find_all('li'):
                        p = doc.add_paragraph(style='List Bullet')
                        p.add_run(li.text)
                elif element.name == 'ol':
                    for i, li in enumerate(element.find_all('li')):
                        p = doc.add_paragraph(style='List Number')
                        p.add_run(li.text)
                elif element.name == 'table':
                    # T·∫°o b·∫£ng
                    rows = element.find_all('tr')
                    if rows:
                        cols_count = max(len(row.find_all(['td', 'th'])) for row in rows)
                        table = doc.add_table(rows=len(rows), cols=cols_count)
                        table.style = 'Table Grid'
                        
                        # ƒêi·ªÅn d·ªØ li·ªáu v√†o b·∫£ng
                        for i, row in enumerate(rows):
                            cells = row.find_all(['td', 'th'])
                            for j, cell in enumerate(cells):
                                if j < cols_count:  # ƒê·∫£m b·∫£o kh√¥ng v∆∞·ª£t qu√° s·ªë c·ªôt
                                    table.cell(i, j).text = cell.text
                        
                        # Th√™m kho·∫£ng tr·ªëng sau b·∫£ng
                        doc.add_paragraph()
                elif element.name == 'pre':
                    # X·ª≠ l√Ω code block
                    code = element.text
                    p = doc.add_paragraph()
                    code_run = p.add_run(code)
                    code_run.font.name = 'Courier New'
                    code_run.font.size = Pt(10)
                elif element.name == 'blockquote':
                    # X·ª≠ l√Ω blockquote
                    p = doc.add_paragraph()
                    p.style = 'Quote'
                    p.add_run(element.text)
                else:
                    # X·ª≠ l√Ω paragraph th√¥ng th∆∞·ªùng
                    p = doc.add_paragraph()
                    
                    # X·ª≠ l√Ω c√°c ph·∫ßn t·ª≠ con (bold, italic, links, etc.)
                    for child in element.children:
                        if child.name == 'strong' or child.name == 'b':
                            p.add_run(child.text).bold = True
                        elif child.name == 'em' or child.name == 'i':
                            p.add_run(child.text).italic = True
                        elif child.name == 'a':
                            p.add_run(child.text).underline = True
                        elif child.name == 'code':
                            code_run = p.add_run(child.text)
                            code_run.font.name = 'Courier New'
                        else:
                            # X·ª≠ l√Ω text th√¥ng th∆∞·ªùng
                            if hasattr(child, 'text'):
                                p.add_run(child.text)
                            else:
                                p.add_run(str(child))
            
            # L∆∞u document v√†o memory
            docx_io = io.BytesIO()
            doc.save(docx_io)
            docx_io.seek(0)
            
            # Encode to base64
            docx_base64 = base64.b64encode(docx_io.read()).decode('utf-8')
            
            return docx_base64, output_filename
            
        except Exception as e:
            logger.error(f"‚ùå L·ªói khi t·∫°o file DOCX: {str(e)}")
            return None, None

# --- H√†m ch·∫°y ·ª©ng d·ª•ng Streamlit ---
def run_gui():
    gui = GUI()
    gui.init_gui()

# --- ƒêi·ªÉm b·∫Øt ƒë·∫ßu c·ªßa ·ª©ng d·ª•ng ---
if __name__ == "__main__":
    run_gui()
